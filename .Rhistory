?vars:VAR
?vars::VAR
?vars::VAR
getRversion()
library(GVARX)
data("PriceVol")
data("tradeweight1")
data("tradeweightx")
Ft=GVAR.Ft(Data=PriceVol,weight.matrix=tradeweight1)
PriceVol
Ft=GVAR.Ft(Data=PriceVol,weight.matrix=tradeweight1)
Ft=GVAR.Ft(data=PriceVol,weight.matrix=tradeweight1)
k=17;head(Ft[[k]]);tail(Ft[[k]])
Result=GVAR.Xt(data=PriceVol,FLag=2,lag.max=10,type="const",ic="SC", weight.matrix=tradeweightx)
Result$G0
Result$G1
Result$F1
Result$G2
Result$F2
Result$lagmatrix
Result$newRESID
#################################################
###    Country-specific GVAR Estimation       ###
#################################################
mainOUTPUT = GVARest(data=PriceVol,FLag=2,lag.max=15,type="const",ic="AIC",weight.matrix=tradeweightx)
## type = c("const", "trend", "both", "none"),
## ic=c("AIC", "HQ", "SC", "FPE")
mainOUTPUT$lagmatrix    # Country-specific GVAR lags
mainOUTPUT$gvar
mainOUTPUT$gvar[[1]]
coef(mainOUTPUT$gvar[[17]])
mainOUTPUT$White[[17]]
mainOUTPUT$NWHAC[[17]][1]
saveCOEF(out=mainOUTPUT,sheet=1,filename="snoopy",save=FALSE)
saveCOEFexo(out=mainOUTPUT,filename="snoopy",save=FALSE)
saveNWCOEF(out=mainOUTPUT,sheet=1,filename="snoopyNW94",save=FALSE)
saveNWCOEFexo(out=mainOUTPUT,filename="snoopyNW94",save=FALSE)
saveWhiteCOEF(out=mainOUTPUT,sheet=1,filename="snoopyWhite",save=FALSE)
saveWhiteCOEFexo(out=mainOUTPUT,filename="snoopyWhite",save=FALSE)
#############################################
## Comparing Average Residual Correlations ##
#############################################
mainOUTPUT$lagmatrix1   # Country-specific VAR lags
cor2_avg=averageCORgvar(out=mainOUTPUT)
as.matrix((cor2_avg$varRSDcor)[[1]])
as.matrix((cor2_avg$varRSDcor)[[2]])
as.matrix(cor2_avg$gvarRSDcor[[1]])
as.matrix(cor2_avg$gvarRSDcor[[2]])
Ft=GVAR.Ft(data=PriceVol,weight.matrix=tradeweightx)
k=17;head(Ft[[k]]);tail(Ft[[k]])
Ft=GVAR.Ft(data=PriceVol,weight.matrix=tradeweightx)
k=15;head(Ft[[k]]);tail(Ft[[k]])
Ft=GVAR.Ft(data=PriceVol,weight.matrix=tradeweight1)
k=15;head(Ft[[k]]);tail(Ft[[k]])
?is.data.frame
?vars::VAR
?showNonASSCII
??showNonASSCII
?showNonASCII
library(GVARX)
library(GVARX)
data("PriceVol")
data("tradeweight1")
data("tradeweightx")
Ft=GVAR_Ft(data=PriceVol,weight.matrix=tradeweight1)
head(Ft[[1]]);tail(Ft[[17]])
Result=GVAR_Xt(data=PriceVol,FLag=2,lag.max=10,type="const",ic="SC", weight.matrix=tradeweightx)
Result$G0
Result$G1
Result$F1
Result$G2
Result$F2
Result$lagmatrix
Result$newRESID
#################################################
###    Country-specific GVAR Estimation       ###
#################################################
mainOUTPUT = GVARest(data=PriceVol,FLag=2,lag.max=15,type="const",ic="AIC",weight.matrix=tradeweightx)
## type = c("const", "trend", "both", "none"),
## ic=c("AIC", "HQ", "SC", "FPE")
mainOUTPUT$lagmatrix    # Country-specific GVAR lags
mainOUTPUT$gvar
mainOUTPUT$gvar[[1]]
coef(mainOUTPUT$gvar[[17]])
mainOUTPUT$White[[17]]
mainOUTPUT$NWHAC[[17]][1]
?stopifnot
library(GVARX)
library(GVARX)
library(GVARX)
library(GVARX)
data("PriceVol")
data("tradeweight1")
data("tradeweightx")
Ft=GVAR_Ft(data=PriceVol,weight.matrix=tradeweight1)
head(Ft[[17]],3)
tail(Ft[[17]],3)
Result=GVAR_Xt(data=Data,FLag=2,lag.max=10,type="const",ic="SC", weight.matrix=tradeweight1)
Result=GVAR_Xt(data=PriceVol,FLag=2,lag.max=10,type="const",ic="SC", weight.matrix=tradeweight1)
Result$G0
Result$G1
Result$F1
Result$G2
Result$F2
#################################################
###    Country-specific GVAR Estimation       ###
#################################################
mainOUTPUT = GVARest(data=PriceVol,FLag=2,lag.max=15,type="const",ic="AIC",weight.matrix=tradeweightx)
#################################################
###    Country-specific GVAR Estimation       ###
#################################################
mainOUTPUT = GVARest(data=PriceVol,FLag=2,lag.max=15,type="const",ic="AIC",weight.matrix=tradeweight1)
## type = c("const", "trend", "both", "none"),
## ic=c("AIC", "HQ", "SC", "FPE")
mainOUTPUT$lagmatrix    # Country-specific GVAR lags
mainOUTPUT$gvar
mainOUTPUT$gvar[[1]]
coef(mainOUTPUT$gvar[[17]])
mainOUTPUT$White[[17]]
mainOUTPUT$NWHAC[[17]][1]
GC_OUTPUT = grangerGVAR(PriceVol,p=2,FLag=2,type="const",lag.max=15,ic="SC",weight.matrix=tradeweight1)
library(GVARX)
library(GVARX)
GC_OUTPUT = grangerGVAR(PriceVol,p=2,FLag=2,type="const",lag.max=15,ic="SC",weight.matrix=tradeweight1)
round(GC_OUTPUT$y1GCy2.var,4)
round(GC_OUTPUT$y2GCy1.var,4)
round(GC_OUTPUT$y1GCy2.gvar,4)
round(GC_OUTPUT$y2GCy1.gvar,4)
getCOEF(out=mainOUTPUT,sheet=1)
library(GVARX)
library(GVARX)
data("PriceVol")
data("tradeweight1")
data("tradeweightx")
Ft=GVAR_Ft(data=PriceVol,weight.matrix=tradeweight1)
head(Ft[[17]],3)
Ft=GVAR_Ft(data=PriceVol,weight.matrix=tradeweightx)
head(Ft[[17]],3)
tail(Ft[[17]],3)
Result=GVAR_Xt(data=PriceVol,FLag=2,lag.max=10,type="const",ic="SC", weight.matrix=tradeweight1)
Result=GVAR_Xt(data=PriceVol,FLag=2,lag.max=10,type="const",ic="SC", weight.matrix=tradeweightx)
library(GVARX)
Ft=GVAR_Ft(data=PriceVol,weight.matrix=tradeweightx)
head(Ft[[17]],3)
tail(Ft[[17]],3)
Result=GVAR_Xt(data=PriceVol,FLag=2,lag.max=10,type="const",ic="SC", weight.matrix=tradeweightx)
Result$G0
Result$G1
Result$F1
Result$G2
Result$F2
Result$lagmatrix
Result$newRESID
#################################################
###    Country-specific GVAR Estimation       ###
#################################################
mainOUTPUT = GVARest(data=PriceVol,FLag=2,lag.max=15,type="const",ic="AIC",weight.matrix=tradeweight1)
## type = c("const", "trend", "both", "none"),
## ic=c("AIC", "HQ", "SC", "FPE")
mainOUTPUT$lagmatrix    # Country-specific GVAR lags
mainOUTPUT$gvar
mainOUTPUT$gvar[[1]]
coef(mainOUTPUT$gvar[[17]])
mainOUTPUT$White[[17]]
mainOUTPUT$NWHAC[[17]][1]
GC_OUTPUT = grangerGVAR(PriceVol,p=2,FLag=2,type="const",lag.max=15,ic="SC",weight.matrix=tradeweight1)
?vars::VAR
library(GVARX)
vars::VAR
vars::VAR
load("PriceVol.rda")
load("./data/PriceVol.rda")
PriceVol
colnames(PriceVol)=c("id","Time","Ret","Vol")
colnames(PriceVol)=c("id","Time","Ret","Vol")
save(PriceVol,file="./data/PriceVol.rda")
load("/data/priceVol.rda")
load("/data/PriceVol.rda")
load("./data/PriceVol.rda")
colnames(PriceVol)
load("./data/PriceVol.rda")
colnames(PriceVol)=c("ID","Time","Ret","Vol" )
save(PriceVol,file="./data/PriceVol.rda")
load("./data/PriceVol.rda")
PriceVol
install.packages(c("actuar", "AER", "AlgDesign", "amap", "Amelia", "aplpack", "arules", "backports", "BatchGetSymbols", "bayesm", "bayesplot", "bayestestR", "BayesX", "bbmle", "BDgraph", "BH", "bigalgebra", "BMA", "brms", "broom", "cairoDevice", "callr", "car", "carData", "caretEnsemble", "caTools", "CDM", "chron", "circlize", "Ckmeans.1d.dp", "classInt", "cli", "cmprsk", "coin", "covr", "cubature", "data.tree", "DBI", "deldir", "dendextend", "Deriv", "DescTools", "DescToolsAddIns", "deSolve", "devtools", "DiceDesign", "digest", "doBy", "doParallel", "DT", "dtw", "e1071", "earth", "Ecdat", "ecodist", "effects", "ellipsis", "emmeans", "energy", "Epi", "epiR", "EQL", "esquisse", "expint", "factoextra", "FactoMineR", "farver", "fda.usc", "fdaMixed", "fdasrvf", "feather", "fields", "foreach", "forecast", "fracdiff", "FrF2", "frontier", "future", "gamlss", "gamlss.dist", "gdtools", "gee", "geepack", "geometry", "gganimate", "ggeffects", "ggExtra", "ggforce", "ggformula", "ggplot2", "ggpubr", "ggraptR", "ggsignif", "ggstance", "glasso", "glmnet", "GlobalOptions", "globals", "gmm", "goftest", "gstat", "HAC", "haven", "hexbin", "HH", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huge", "igraph", "insight", "inspectdf", "installr", "jomo", "jpeg", "keras", "kernlab", "knitcitations", "knitr", "ks", "labdsv", "later", "latticeExtra", "lava", "lavaan", "leaflet", "lfe", "libcoin", "lintr", "listenv", "lmomRFA", "logspline", "loo", "lpSolve", "magick", "maptools", "markdown", "Matrix", "matrixStats", "maxlike", "MCMCpack", "mediation", "memisc", "meta", "mets", "mgcv", "mice", "miceadds", "microbenchmark", "mime", "mirt", "miscTools", "missMDA", "mixlm", "mlogit", "mockery", "modelr", "msm", "mstate", "multcomp", "multicool", "MuMIn", "muRL", "mvmeta", "network", "nlme", "NMOF", "numbers", "nycflights13", "openair", "OpenMx", "openxlsx", "optmatch", "ordinal", "partitions", "pbapply", "PBSddesolve", "pbv", "pdftools", "pec", "performance", "pingr", "pkgbuild", "pkgconfig", "plm", "plot3D", "plotly", "plotmo", "plotrix", "pls", "plyr", "pmml", "polspline", "polycor", "pracma", "PracTools", "prodlim", "promises", "purrr", "qgraph", "quadprog", "quantreg", "qvcalc", "R.cache", "R.devices", "R.oo", "R.rsp", "R.utils", "randomcoloR", "RandomFields", "randomForestSRC", "raster", "rattle", "Rcmdr", "RcmdrPlugin.EZR", "RcmdrPlugin.KMggplot2", "RcmdrPlugin.NMBU", "RcmdrPlugin.survival", "Rcpp", "RcppArmadillo", "RcppEigen", "rdbnomics", "Rdpack", "recipes", "repr", "reticulate", "rgdal", "rgeos", "rgl", "RgoogleMaps", "riskRegression", "rjags", "RJSONIO", "rlang", "rmarkdown", "rmgarch", "rms", "RMySQL", "robfilter", "RODBC", "roxygen2", "rpart.plot", "RQuantLib", "rrcov", "RSNNS", "RSQLite", "rstanarm", "rstantools", "runjags", "rvest", "RWeka", "RWekajars", "scales", "segmented", "selectr", "semPlot", "semTools", "seriation", "sf", "shades", "shiny", "shinyWidgets", "sirt", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "slam", "sna", "sp", "spam", "sparklyr", "SparseM", "spate", "SpatialExtremes", "SpatialNP", "SpatialPack", "spatstat", "spatstat.utils", "spData", "spdep", "spsurvey", "StanHeaders", "stringdist", "strucchange", "styler", "survival", "svd", "sweep", "sys", "systemfit", "TAM", "tensorflow", "testthat", "tibbletime", "tidyquant", "tidyr", "tidyverse", "timereg", "timetk", "tinytex", "tm", "TTR", "units", "unmarked", "uroot", "varhandle", "vctrs", "vegan", "VGAM", "visNetwork", "webshot", "whisker", "writexl", "xfun", "xgboost", "xml2", "yardstick", "zCompositions", "zip", "zipfR"))
install.packages(c("DT", "ecodist", "fda.usc", "latticeExtra", "lfe", "loo", "memisc", "meta", "mime", "msm", "MuMIn", "plot3D", "recipes", "reticulate", "RSQLite", "runjags", "SparseM", "spsurvey", "unmarked", "vctrs"))
install.packages(c("fda.usc", "latticeExtra", "plot3D", "reticulate", "RSQLite", "SparseM"))
install.packages("plot3D")
install.packages("testthat")
